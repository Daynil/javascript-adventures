{"pageProps":{"source":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Normally you can't publicly expose structured data from a static site via an \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/Application_programming_interface\"\n  }), \"API (Application Programming Interface)\"), \" because you don't control the server (assuming you're taking advantage of an excellent \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.netlify.com/jamstack/\"\n  }), \"static site CDN like Netlify\"), \"), so you can't build an API route to access it.\"), mdx(\"p\", null, \"But what if there was a way to have your static site cake, and eat it too? \\uD83C\\uDF70 Let's create a way to access some structured content from your static site without having to host your own server or use a hosted CMS!\"), mdx(\"h2\", null, \"What's the Point?\"), mdx(\"p\", null, \"You may, rightfully, be wondering why you would even bother doing something like this. The point of a static site is to allow pages to be loaded very quickly and cheaply from an edge-hosted CDN, without needing to maintain any servers.\"), mdx(\"p\", null, \"But what if you have other sites that want to access the data from your site? Usually, if you have lots of complex data or have multiple contributors, you'd already be using a CMS like \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.contentful.com/\"\n  }), \"Contentful\"), \", or perhaps \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://developer.wordpress.org/rest-api/\"\n  }), \"headless WordPress\"), \", in which case you already have an API. But if you're building something simple, you can save yourself some complexity by just using local files to store your content.\"), mdx(\"p\", null, \"If you have your own server to serve your static site, then you can just add an API route which serves the data however you need it. But to me, that defeats the purpose of the simplicity static sites can provide. It's nice to avoid servers until you actually really need them, right?!\"), mdx(\"p\", null, \"For this blog, I currently use markdown files to stash my posts right in my \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://github.com/Daynil/quests-in-code/tree/master/src/content/posts\"\n  }), \"github repository\"), \". Whenever I add a post, Gatsby builds the blog posts into pages, and everything gets pushed and updated on my Netlify account.\"), mdx(\"p\", null, \"However, I wanted to show a list of information about my blog posts from this site on my \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://dlibin.net/posts/\"\n  }), \"personal website\"), \" as well. So how do we access just the metadata of each post on one website from another?\"), mdx(\"p\", null, \"Typically, if a website doesn't have an API, you'd be stuck with web scraping, an inefficient and error-prone way of getting information from a website at the best of times, but sometimes it's all we've got. But we can do better!\"), mdx(\"h2\", null, \"Static Site vs. Server API\"), mdx(\"p\", null, \"I like to think of static site generators like \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://joshwcomeau.com/gatsby/a-static-future/\"\n  }), \"compile time servers\"), \". Once you wrap your head around this concept, you realize that it's not a great conceptual leap between a traditional Node server and the Node APIs that Gatsby uses (or \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.staticgen.com/\"\n  }), \"any other static site generator\"), \" for that matter).\"), mdx(\"p\", null, \"So with that perspective in mind, let's consider with a framework that may be more familiar. How would we approach this if we had our own server?\"), mdx(\"p\", null, \"One good way to do it might be to grab all of your post's metadata, bundle it into JSON, then expose it via a REST API route. For example, if you hit \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MyBlogAPI.com/posts\"), \" with a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GET\"), \" request, we could send over the list of all posts in the body of the response as JSON.\"), mdx(\"p\", null, \"So how would you do this with Gatsby? As it turns out, just about the exact same way! There are two key differences, however.\"), mdx(\"h2\", null, \"Generate Structured Metadata at Build Time\"), mdx(\"p\", null, \"First, instead of dynamically looking up all posts whenever the API is hit, then sending a response, we can take advantage of the build time efficiency of creating a JSON metadata file for all of our posts just once and allowing our CDN to cache it to the edge, whenever we publish a new post.\"), mdx(\"p\", null, \"Second, the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GET\"), \" request will no longer go to any separate \\\"API\\\", per se. Instead, we can just save the JSON file in the root public build folder that Gatsby generates when our site is being built, and you can now simply access it by hitting your website's base url plus the name of the JSON file! \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MyGatsbyBlog.com/PostsMetadata.json\")), mdx(\"p\", null, \"Gatsby exposes its build time Node API in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gatsby-node.js\"), \" file, so let's look at what we need for this to work.\"), mdx(\"div\", {\n    \"className\": \"remark-code-title\"\n  }, \"gatsby-node.js\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-javascript\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"const\"), \" path = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"require\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'path'\"), \");\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"const\"), \" fs = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"require\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'fs'\"), \");\\n\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"exports\"), \".createPages = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"async\"), \" ({ graphql, actions }) => {\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"const\"), \" { createPage } = actions;\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"const\"), \" mdxPages = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"await\"), \" graphql(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"`\\n    query AllMdxPages {\\n      allMdx(sort: { fields: [frontmatter___date], order: DESC }) {\\n        edges {\\n          node {\\n            excerpt\\n            timeToRead\\n            frontmatter {\\n              date(formatString: \\\"MMMM DD, YYYY\\\")\\n              description\\n              title\\n              tags\\n            }\\n            fields {\\n              slug\\n            }\\n          }\\n        }\\n      }\\n    }\\n  `\"), \");\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Create a page for each post\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Also stash metadata about each post in a JSON file for use by personal site post index\"), \"\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"const\"), \" posts = mdxPages.data.allMdx.edges;\\n\\n  \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"let\"), \" postsMetadata = [];\\n\\n  posts.forEach(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), \"(\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"post, index\"), \") =>\"), \" {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"const\"), \" previous = index === posts.length - \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \" ? \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-literal\"\n  }), \"null\"), \" : posts[index + \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \"].node;\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"const\"), \" next = index === \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"0\"), \" ? \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-literal\"\n  }), \"null\"), \" : posts[index - \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-number\"\n  }), \"1\"), \"].node;\\n    createPage({\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"path\"), \": post.node.fields.slug,\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"component\"), \": path.resolve(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'./src/components/blog-post/blog-post.tsx'\"), \"),\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"context\"), \": {\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"slug\"), \": post.node.fields.slug,\\n        \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"featuredImage\"), \": \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"`\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-subst\"\n  }), \"${post.node.fields.slug}\"), \"featuredImage.png/`\"), \",\\n        previous,\\n        next\\n      }\\n    });\\n\\n    postsMetadata.push({\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"excerpt\"), \": post.node.excerpt,\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"timeToRead\"), \": post.node.timeToRead,\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"date\"), \": post.node.frontmatter.date,\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"description\"), \": post.node.frontmatter.description,\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"title\"), \": post.node.frontmatter.title,\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"tags\"), \": post.node.frontmatter.tags,\\n      \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-attr\"\n  }), \"slug\"), \": post.node.fields.slug\\n    });\\n  });\\n\\n  fs.writeFileSync(\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'./public/postsMetaData.json'\"), \",\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"JSON\"), \".stringify(postsMetadata)\\n  );\\n};\\n\")), mdx(\"p\", null, \"In this function, first we're querying our GraphQL layer for all the data about our posts. Then, we loop over each post and create a page for it. If you want to understand this part more deeply, I have a post \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/posts/gatsby-blog-from-scratch/\"\n  }), \"diving into the details of the inner workings of Gatsby, GraphQL, and how the build process happens\"), \".\"), mdx(\"p\", null, \"The more relevant bit to this discussion is what we do after we build a page for each post - we create an object with metadata details about the post and add it to an array. Once we've got our full array of metadata about our posts, we use Node's \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"writeFileSync\"), \" function to serialize and write the entire array out into a JSON file, which we put directly into the public build folder for Gatsy.\"), mdx(\"p\", null, \"That's it, we're done! Now, any time we rebuild the site with a new post, the metadata file gets updated with that file's new JSON data.\"), mdx(\"p\", null, \"So now, as soon as we hit our blog's url and add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/postsMetaData.json\"), \", we'll get a body of just the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://questsincode.com/postsMetaData.json\"\n  }), \"raw JSON string\"), \".\"), mdx(\"p\", null, \"Great! All we have to do is jump over to wherever else we want to access this data programmatically and issue a \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"GET\"), \" request using our HTTP request library of choice.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-javascript\"\n  }), \"fetch(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'https://questsincode.com/postsMetaData.json'\"), \")\\n  .then(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"res\"), \" =>\"), \" res.json())\\n  .then(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-function\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"hljs-params\"\n  }), \"data\"), \" =>\"), \" {\\n    \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-comment\"\n  }), \"// Do something creative\"), \"\\n  });\\n\")), mdx(\"p\", null, \"But wait, I hear you saying already. What about...\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://stackoverflow.com/questions/tagged/cors\"\n  }), \"CORS\"), \"?! \\uD83D\\uDE31\"), mdx(\"h2\", null, \"Addressing the CORS Issue\"), mdx(\"p\", null, \"If you've been coding for the web for any length of time, you'll likely have run into the dreaded CORS issue from time to time. \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\"\n  }), \"Cross-origin resource sharing (CORS)\"), \" is a security mechanism that prevents making requests to external domains from within the javascript of the domain your requesting code is served from.\"), mdx(\"p\", null, \"If you had your own server for your static site and created an API route for the metadata, this wouldn't be a problem, since they would be on the same domain. If you were using a CMS, CORS would likely already be set up.\"), mdx(\"p\", null, \"However, in our situation, we're making a request from one domain to another within the javascript of our site, so the fetch request will immediately fail with a CORS error.\"), mdx(\"p\", null, \"If you were running an \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://expressjs.com/en/resources/middleware/cors.html\"\n  }), \"express server\"), \", you might be familiar with allowing cross-origin requests with a bit of configuration.\"), mdx(\"div\", {\n    \"className\": \"remark-code-title\"\n  }, \"my-blog-server.js\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-javascript\"\n  }), mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" express = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"require\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'express'\"), \");\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" cors = \", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-built_in\"\n  }), \"require\"), \"(\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-string\"\n  }), \"'cors'\"), \");\\n\", mdx(\"span\", _extends({\n    parentName: \"code\"\n  }, {\n    \"className\": \"hljs-keyword\"\n  }), \"var\"), \" app = express();\\n\\napp.use(cors());\\n\")), mdx(\"p\", null, \"However, if we're hosting on a CDN like Netlify, we don't have access to the code that serves our site. So I guess we can't do this after all? \\uD83D\\uDE22\"), mdx(\"p\", null, \"Not so fast! Netlify is pretty awesome, so it provides a \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.netlify.com/configure-builds/common-configurations/\"\n  }), \"wealth of configuration options\"), \" available for most use cases you can imagine.\"), mdx(\"p\", null, \"For our case, we are interested in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://docs.netlify.com/configure-builds/file-based-configuration/\"\n  }), \"file-based configuration options, which are stored in the \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"netlify.toml\"), \" file\"), \". We can allow cross-origin requests right in the toml file. In fact, since we only care about cross-origin requests to the metadata file, we can restrict this option to just that route!\"), mdx(\"div\", {\n    \"className\": \"remark-code-title\"\n  }, \"netlify.toml\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"hljs language-text\"\n  }), \"[[headers]]\\n  # Define which paths this specific [[headers]] block will cover.\\n  for = \\\"/postsMetaData.json\\\"\\n    [headers.values]\\n    Access-Control-Allow-Origin = \\\"*\\\"\\n\")), mdx(\"p\", null, \"If you're using Gatsby, make sure to place the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"netlify.toml\"), \" file in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.gatsbyjs.org/docs/static-folder/\"\n  }), \"root static folder\"), \" of your site. This basically just tells Gatsby to do nothing to this file at build time except move it to the root public build directory, which is exactly where Netlify expects it.\"), mdx(\"p\", null, \"Now, if we go back and make our HTTP request for our blog metadata on our other site, we'll get the data as expected!\"), mdx(\"h2\", null, \"Conclusion\"), mdx(\"p\", null, \"This example uses Gatsby, but you could do the same with other static site generators. During the step where you would typically generate the site from your local data, hook in with your code to expose any data you need in a structured file like JSON, then link it to a route on your website. Here's an example of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.raymondcamden.com/2016/03/01/adding-an-api-to-a-static-site\"\n  }), \"creating an API for your static Jekyll site\"), \".\"), mdx(\"p\", null, \"If you're using something other than Netlify as your CDN host, search their documentation for configuration instructions. CORS is a common enough configuration for most hosts to allow adjustment. For example, \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://firebase.google.com/docs/hosting/full-config#headers\"\n  }), \"Firebase allows you to define CORS behavior in your \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"firebase.json\"), \" file\"), \".\"), mdx(\"p\", null, \"It requires a bit of a perspective shift, but thinking this way unlocks many new capabilities for your static site generator!\"));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>Normally you can&#x27;t publicly expose structured data from a static site via an <a href=\"https://en.wikipedia.org/wiki/Application_programming_interface\">API (Application Programming Interface)</a> because you don&#x27;t control the server (assuming you&#x27;re taking advantage of an excellent <a href=\"https://www.netlify.com/jamstack/\">static site CDN like Netlify</a>), so you can&#x27;t build an API route to access it.</p><p>But what if there was a way to have your static site cake, and eat it too? 🍰 Let&#x27;s create a way to access some structured content from your static site without having to host your own server or use a hosted CMS!</p><h2>What&#x27;s the Point?</h2><p>You may, rightfully, be wondering why you would even bother doing something like this. The point of a static site is to allow pages to be loaded very quickly and cheaply from an edge-hosted CDN, without needing to maintain any servers.</p><p>But what if you have other sites that want to access the data from your site? Usually, if you have lots of complex data or have multiple contributors, you&#x27;d already be using a CMS like <a href=\"https://www.contentful.com/\">Contentful</a>, or perhaps <a href=\"https://developer.wordpress.org/rest-api/\">headless WordPress</a>, in which case you already have an API. But if you&#x27;re building something simple, you can save yourself some complexity by just using local files to store your content.</p><p>If you have your own server to serve your static site, then you can just add an API route which serves the data however you need it. But to me, that defeats the purpose of the simplicity static sites can provide. It&#x27;s nice to avoid servers until you actually really need them, right?!</p><p>For this blog, I currently use markdown files to stash my posts right in my <a href=\"https://github.com/Daynil/quests-in-code/tree/master/src/content/posts\">github repository</a>. Whenever I add a post, Gatsby builds the blog posts into pages, and everything gets pushed and updated on my Netlify account.</p><p>However, I wanted to show a list of information about my blog posts from this site on my <a href=\"https://dlibin.net/posts/\">personal website</a> as well. So how do we access just the metadata of each post on one website from another?</p><p>Typically, if a website doesn&#x27;t have an API, you&#x27;d be stuck with web scraping, an inefficient and error-prone way of getting information from a website at the best of times, but sometimes it&#x27;s all we&#x27;ve got. But we can do better!</p><h2>Static Site vs. Server API</h2><p>I like to think of static site generators like <a href=\"https://joshwcomeau.com/gatsby/a-static-future/\">compile time servers</a>. Once you wrap your head around this concept, you realize that it&#x27;s not a great conceptual leap between a traditional Node server and the Node APIs that Gatsby uses (or <a href=\"https://www.staticgen.com/\">any other static site generator</a> for that matter).</p><p>So with that perspective in mind, let&#x27;s consider with a framework that may be more familiar. How would we approach this if we had our own server?</p><p>One good way to do it might be to grab all of your post&#x27;s metadata, bundle it into JSON, then expose it via a REST API route. For example, if you hit <code>MyBlogAPI.com/posts</code> with a <code>GET</code> request, we could send over the list of all posts in the body of the response as JSON.</p><p>So how would you do this with Gatsby? As it turns out, just about the exact same way! There are two key differences, however.</p><h2>Generate Structured Metadata at Build Time</h2><p>First, instead of dynamically looking up all posts whenever the API is hit, then sending a response, we can take advantage of the build time efficiency of creating a JSON metadata file for all of our posts just once and allowing our CDN to cache it to the edge, whenever we publish a new post.</p><p>Second, the <code>GET</code> request will no longer go to any separate &quot;API&quot;, per se. Instead, we can just save the JSON file in the root public build folder that Gatsby generates when our site is being built, and you can now simply access it by hitting your website&#x27;s base url plus the name of the JSON file! <code>MyGatsbyBlog.com/PostsMetadata.json</code></p><p>Gatsby exposes its build time Node API in the <code>gatsby-node.js</code> file, so let&#x27;s look at what we need for this to work.</p><div class=\"remark-code-title\">gatsby-node.js</div><pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;fs&#x27;</span>);\n\n<span class=\"hljs-built_in\">exports</span>.createPages = <span class=\"hljs-keyword\">async</span> ({ graphql, actions }) =&gt; {\n  <span class=\"hljs-keyword\">const</span> { createPage } = actions;\n\n  <span class=\"hljs-keyword\">const</span> mdxPages = <span class=\"hljs-keyword\">await</span> graphql(<span class=\"hljs-string\">`\n    query AllMdxPages {\n      allMdx(sort: { fields: [frontmatter___date], order: DESC }) {\n        edges {\n          node {\n            excerpt\n            timeToRead\n            frontmatter {\n              date(formatString: &quot;MMMM DD, YYYY&quot;)\n              description\n              title\n              tags\n            }\n            fields {\n              slug\n            }\n          }\n        }\n      }\n    }\n  `</span>);\n\n  <span class=\"hljs-comment\">// Create a page for each post</span>\n  <span class=\"hljs-comment\">// Also stash metadata about each post in a JSON file for use by personal site post index</span>\n  <span class=\"hljs-keyword\">const</span> posts = mdxPages.data.allMdx.edges;\n\n  <span class=\"hljs-keyword\">let</span> postsMetadata = [];\n\n  posts.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">post, index</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> previous = index === posts.length - <span class=\"hljs-number\">1</span> ? <span class=\"hljs-literal\">null</span> : posts[index + <span class=\"hljs-number\">1</span>].node;\n    <span class=\"hljs-keyword\">const</span> next = index === <span class=\"hljs-number\">0</span> ? <span class=\"hljs-literal\">null</span> : posts[index - <span class=\"hljs-number\">1</span>].node;\n    createPage({\n      <span class=\"hljs-attr\">path</span>: post.node.fields.slug,\n      <span class=\"hljs-attr\">component</span>: path.resolve(<span class=\"hljs-string\">&#x27;./src/components/blog-post/blog-post.tsx&#x27;</span>),\n      <span class=\"hljs-attr\">context</span>: {\n        <span class=\"hljs-attr\">slug</span>: post.node.fields.slug,\n        <span class=\"hljs-attr\">featuredImage</span>: <span class=\"hljs-string\">`<span class=\"hljs-subst\">${post.node.fields.slug}</span>featuredImage.png/`</span>,\n        previous,\n        next\n      }\n    });\n\n    postsMetadata.push({\n      <span class=\"hljs-attr\">excerpt</span>: post.node.excerpt,\n      <span class=\"hljs-attr\">timeToRead</span>: post.node.timeToRead,\n      <span class=\"hljs-attr\">date</span>: post.node.frontmatter.date,\n      <span class=\"hljs-attr\">description</span>: post.node.frontmatter.description,\n      <span class=\"hljs-attr\">title</span>: post.node.frontmatter.title,\n      <span class=\"hljs-attr\">tags</span>: post.node.frontmatter.tags,\n      <span class=\"hljs-attr\">slug</span>: post.node.fields.slug\n    });\n  });\n\n  fs.writeFileSync(\n    <span class=\"hljs-string\">&#x27;./public/postsMetaData.json&#x27;</span>,\n    <span class=\"hljs-built_in\">JSON</span>.stringify(postsMetadata)\n  );\n};\n</code></pre><p>In this function, first we&#x27;re querying our GraphQL layer for all the data about our posts. Then, we loop over each post and create a page for it. If you want to understand this part more deeply, I have a post <a href=\"/posts/gatsby-blog-from-scratch/\">diving into the details of the inner workings of Gatsby, GraphQL, and how the build process happens</a>.</p><p>The more relevant bit to this discussion is what we do after we build a page for each post - we create an object with metadata details about the post and add it to an array. Once we&#x27;ve got our full array of metadata about our posts, we use Node&#x27;s <code>writeFileSync</code> function to serialize and write the entire array out into a JSON file, which we put directly into the public build folder for Gatsy.</p><p>That&#x27;s it, we&#x27;re done! Now, any time we rebuild the site with a new post, the metadata file gets updated with that file&#x27;s new JSON data.</p><p>So now, as soon as we hit our blog&#x27;s url and add <code>/postsMetaData.json</code>, we&#x27;ll get a body of just the <a href=\"https://questsincode.com/postsMetaData.json\">raw JSON string</a>.</p><p>Great! All we have to do is jump over to wherever else we want to access this data programmatically and issue a <code>GET</code> request using our HTTP request library of choice.</p><pre><code class=\"hljs language-javascript\">fetch(<span class=\"hljs-string\">&#x27;https://questsincode.com/postsMetaData.json&#x27;</span>)\n  .then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> res.json())\n  .then(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> {\n    <span class=\"hljs-comment\">// Do something creative</span>\n  });\n</code></pre><p>But wait, I hear you saying already. What about...<a href=\"https://stackoverflow.com/questions/tagged/cors\">CORS</a>?! 😱</p><h2>Addressing the CORS Issue</h2><p>If you&#x27;ve been coding for the web for any length of time, you&#x27;ll likely have run into the dreaded CORS issue from time to time. <a href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\">Cross-origin resource sharing (CORS)</a> is a security mechanism that prevents making requests to external domains from within the javascript of the domain your requesting code is served from.</p><p>If you had your own server for your static site and created an API route for the metadata, this wouldn&#x27;t be a problem, since they would be on the same domain. If you were using a CMS, CORS would likely already be set up.</p><p>However, in our situation, we&#x27;re making a request from one domain to another within the javascript of our site, so the fetch request will immediately fail with a CORS error.</p><p>If you were running an <a href=\"https://expressjs.com/en/resources/middleware/cors.html\">express server</a>, you might be familiar with allowing cross-origin requests with a bit of configuration.</p><div class=\"remark-code-title\">my-blog-server.js</div><pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;express&#x27;</span>);\n<span class=\"hljs-keyword\">var</span> cors = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;cors&#x27;</span>);\n<span class=\"hljs-keyword\">var</span> app = express();\n\napp.use(cors());\n</code></pre><p>However, if we&#x27;re hosting on a CDN like Netlify, we don&#x27;t have access to the code that serves our site. So I guess we can&#x27;t do this after all? 😢</p><p>Not so fast! Netlify is pretty awesome, so it provides a <a href=\"https://docs.netlify.com/configure-builds/common-configurations/\">wealth of configuration options</a> available for most use cases you can imagine.</p><p>For our case, we are interested in the <a href=\"https://docs.netlify.com/configure-builds/file-based-configuration/\">file-based configuration options, which are stored in the <code>netlify.toml</code> file</a>. We can allow cross-origin requests right in the toml file. In fact, since we only care about cross-origin requests to the metadata file, we can restrict this option to just that route!</p><div class=\"remark-code-title\">netlify.toml</div><pre><code class=\"hljs language-text\">[[headers]]\n  # Define which paths this specific [[headers]] block will cover.\n  for = &quot;/postsMetaData.json&quot;\n    [headers.values]\n    Access-Control-Allow-Origin = &quot;*&quot;\n</code></pre><p>If you&#x27;re using Gatsby, make sure to place the <code>netlify.toml</code> file in the <a href=\"https://www.gatsbyjs.org/docs/static-folder/\">root static folder</a> of your site. This basically just tells Gatsby to do nothing to this file at build time except move it to the root public build directory, which is exactly where Netlify expects it.</p><p>Now, if we go back and make our HTTP request for our blog metadata on our other site, we&#x27;ll get the data as expected!</p><h2>Conclusion</h2><p>This example uses Gatsby, but you could do the same with other static site generators. During the step where you would typically generate the site from your local data, hook in with your code to expose any data you need in a structured file like JSON, then link it to a route on your website. Here&#x27;s an example of <a href=\"https://www.raymondcamden.com/2016/03/01/adding-an-api-to-a-static-site\">creating an API for your static Jekyll site</a>.</p><p>If you&#x27;re using something other than Netlify as your CDN host, search their documentation for configuration instructions. CORS is a common enough configuration for most hosts to allow adjustment. For example, <a href=\"https://firebase.google.com/docs/hosting/full-config#headers\">Firebase allows you to define CORS behavior in your <code>firebase.json</code> file</a>.</p><p>It requires a bit of a perspective shift, but thinking this way unlocks many new capabilities for your static site generator!</p>","scope":{}},"slug":"create-api-from-static-site","title":"Create an API from your Static Site","tags":["JavaScript","Gatsby"],"date":"2020-07-22","description":"Create an API using data from your static site so you can read data from it in another application without resorting to web scraping."},"__N_SSG":true}